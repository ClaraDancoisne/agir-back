// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Suivi {
  id              String      @id
  type            String
  data            Json        @default("{}")
  computed_impact Boolean     @default(false)
  created_at      DateTime    @default(now()) @db.Timestamptz(3)
  updated_at      DateTime    @updatedAt @db.Timestamptz(3)
  utilisateurId   String
  utilisateur     Utilisateur @relation(fields: [utilisateurId], references: [id])
}

model OIDC_STATE {
  loginId       String   @id
  utilisateurId String?  @unique
  state         String?
  nonce         String?
  idtoken       String?
  created_at    DateTime @default(now()) @db.Timestamptz(3)
  updated_at    DateTime @default(now()) @updatedAt @db.Timestamptz(3)
}

model Utilisateur {
  id                       String        @id
  email                    String?       @unique
  nom                      String        @default("nom")
  prenom                   String?       @default("prenom")
  passwordHash             String?       @default("hash")
  passwordSalt             String?       @default("salt")
  code_postal              String?
  revenu_fiscal            Int?
  points                   Int           @default(0)
  quizzLevels              Json          @default("{}")
  onboardingData           Json          @default("{}")
  onboardingResult         Json          @default("{}")
  todo                     Json          @default("{}")
  empreintes               Empreinte[]
  interactions             Interaction[]
  suivis                   Suivi[]
  badges                   Badge[]
  questionsNGC             QuestionNGC[]
  created_at               DateTime      @default(now()) @db.Timestamptz(3)
  updated_at               DateTime      @default(now()) @updatedAt @db.Timestamptz(3)
  failed_login_count       Int           @default(0)
  prevent_login_before     DateTime      @default(now())
  code                     String?
  active_account           Boolean       @default(true)
  failed_checkcode_count   Int           @default(0)
  prevent_checkcode_before DateTime      @default(now())
  sent_email_count         Int           @default(0)
  prevent_sendemail_before DateTime      @default(now())
  services                 Service[]
}

model Interaction {
  id                            String      @id
  content_id                    String?
  type                          String
  titre                         String
  soustitre                     String?
  thematique_gamification       String
  thematique_gamification_titre String      @default("")
  thematiques                   String[]    @default([])
  tags                          String[]    @default([])
  duree                         String?
  frequence                     String?
  image_url                     String?
  url                           String?
  seen                          Int         @default(0)
  seen_at                       DateTime?   @db.Timestamptz(3)
  clicked                       Boolean     @default(false)
  clicked_at                    DateTime?   @db.Timestamptz(3)
  done                          Boolean     @default(false)
  done_at                       DateTime?   @db.Timestamptz(3)
  locked                        Boolean     @default(false)
  difficulty                    Int         @default(1)
  points                        Int         @default(0)
  score                         Decimal     @default(0.5) @db.Decimal(10, 10)
  quizz_score                   Int?
  scheduled_reset               DateTime?   @db.Timestamptz(3)
  day_period                    Int?
  pinned_at_position            Int?
  raison_lock                   String?
  codes_postaux                 String[]    @default([])
  created_at                    DateTime    @default(now()) @db.Timestamptz(3)
  updated_at                    DateTime    @updatedAt @db.Timestamptz(3)
  utilisateurId                 String
  utilisateur                   Utilisateur @relation(fields: [utilisateurId], references: [id])
}

model InteractionDefinition {
  id                            String   @id
  content_id                    String?
  type                          String
  titre                         String
  soustitre                     String?
  thematique_gamification       String
  thematique_gamification_titre String   @default("")
  thematiques                   String[] @default([])
  tags                          String[] @default([])
  duree                         String?
  frequence                     String?
  image_url                     String?
  url                           String?
  locked                        Boolean  @default(false)
  difficulty                    Int      @default(1)
  points                        Int      @default(0)
  score                         Decimal  @default(0.5) @db.Decimal(10, 10)
  day_period                    Int?
  pinned_at_position            Int?
  raison_lock                   String?
  codes_postaux                 String[] @default([])
  created_at                    DateTime @default(now()) @db.Timestamptz(3)
  updated_at                    DateTime @updatedAt @db.Timestamptz(3)

  @@unique([type, content_id])
}

model Empreinte {
  id            String       @id
  initial       Boolean      @default(true)
  bilan         Json?
  created_at    DateTime     @default(now()) @db.Timestamptz(3)
  updated_at    DateTime     @default(now()) @updatedAt @db.Timestamptz(3)
  utilisateur   Utilisateur  @relation(fields: [utilisateurId], references: [id])
  utilisateurId String
  situationId   String       @unique
  situation     SituationNGC @relation(fields: [situationId], references: [id])
}

model QuestionNGC {
  id            String      @id
  key           String
  value         String?
  utilisateurId String
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id])
  created_at    DateTime    @default(now()) @db.Timestamptz(3)
  updated_at    DateTime    @default(now()) @updatedAt @db.Timestamptz(3)

  @@unique([key, utilisateurId])
}

model SituationNGC {
  id         String     @id
  situation  Json?
  empreinte  Empreinte?
  created_at DateTime   @default(now()) @db.Timestamptz(3)
}

model Badge {
  id            String       @id
  type          String?
  titre         String
  Utilisateur   Utilisateur? @relation(fields: [utilisateurId], references: [id])
  utilisateurId String
  created_at    DateTime     @default(now()) @db.Timestamptz(3)
  updated_at    DateTime     @default(now()) @updatedAt @db.Timestamptz(3)

  @@unique([type, utilisateurId])
}

model Service {
  id                  String             @id
  serviceDefinitionId String
  serviceDefinition   ServiceDefinition? @relation(fields: [serviceDefinitionId], references: [id])
  utilisateurId       String
  utilisateur         Utilisateur        @relation(fields: [utilisateurId], references: [id])

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  @@unique([serviceDefinitionId, utilisateurId])
}

model ServiceDefinition {
  id             String    @id
  titre          String
  url            String?
  is_url_externe Boolean?
  is_local       Boolean   @default(false)
  thematiques    String[]  @default([])
  created_at     DateTime  @default(now()) @db.Timestamptz(3)
  updated_at     DateTime  @default(now()) @updatedAt @db.Timestamptz(3)
  services       Service[]
}
