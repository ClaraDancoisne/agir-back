// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Suivi {
  id              String      @id
  type            String
  data            Json        @default("{}")
  computed_impact Boolean     @default(false)
  created_at      DateTime    @default(now()) @db.Timestamptz(3)
  updated_at      DateTime    @updatedAt @db.Timestamptz(3)
  utilisateurId   String
  utilisateur     Utilisateur @relation(fields: [utilisateurId], references: [id])
}

model OIDC_STATE {
  loginId       String   @id
  utilisateurId String?  @unique
  state         String?
  nonce         String?
  idtoken       String?
  created_at    DateTime @default(now()) @db.Timestamptz(3)
  updated_at    DateTime @default(now()) @updatedAt @db.Timestamptz(3)
}

model Utilisateur {
  id           String        @id
  email        String?       @unique
  name         String
  code_postal  String?
  points       Int           @default(0)
  quizzLevels  Json          @default("{}")
  empreintes   Empreinte[]
  interactions Interaction[]
  suivis       Suivi[]
  badges       Badge[]
  questionsNGC QuestionNGC[]
  created_at   DateTime      @default(now()) @db.Timestamptz(3)
  updated_at   DateTime      @default(now()) @updatedAt @db.Timestamptz(3)
}

model Interaction {
  id                 String      @id
  content_id         String?
  type               String
  titre              String
  soustitre          String?
  categorie          String
  tags               String[]    @default([])
  duree              String?
  frequence          String?
  image_url          String?
  url                String?
  seen               Int         @default(0)
  seen_at            DateTime?   @db.Timestamptz(3)
  clicked            Boolean     @default(false)
  clicked_at         DateTime?   @db.Timestamptz(3)
  done               Boolean     @default(false)
  done_at            DateTime?   @db.Timestamptz(3)
  locked             Boolean     @default(false)
  difficulty         Int         @default(1)
  points             Int         @default(0)
  score              Decimal     @default(0.5) @db.Decimal(10, 10)
  quizz_score        Int?
  scheduled_reset    DateTime?   @db.Timestamptz(3)
  day_period         Int?
  pinned_at_position Int?
  raison_lock        String?
  codes_postaux      String[]    @default([])
  created_at         DateTime    @default(now()) @db.Timestamptz(3)
  updated_at         DateTime    @updatedAt @db.Timestamptz(3)
  utilisateurId      String
  utilisateur        Utilisateur @relation(fields: [utilisateurId], references: [id])
}

model InteractionDefinition {
  id                 String   @id
  content_id         String?
  type               String
  titre              String
  soustitre          String?
  categorie          String
  tags               String[] @default([])
  duree              String?
  frequence          String?
  image_url          String?
  url                String?
  locked             Boolean  @default(false)
  difficulty         Int      @default(1)
  points             Int      @default(0)
  score              Decimal  @default(0.5) @db.Decimal(10, 10)
  day_period         Int?
  pinned_at_position Int?
  raison_lock        String?
  codes_postaux      String[] @default([])
  created_at         DateTime @default(now()) @db.Timestamptz(3)
  updated_at         DateTime @updatedAt @db.Timestamptz(3)
}

model Empreinte {
  id            String       @id
  initial       Boolean      @default(true)
  bilan         Json?
  created_at    DateTime     @default(now()) @db.Timestamptz(3)
  updated_at    DateTime     @default(now()) @updatedAt @db.Timestamptz(3)
  utilisateur   Utilisateur  @relation(fields: [utilisateurId], references: [id])
  utilisateurId String
  situationId   String       @unique
  situation     SituationNGC @relation(fields: [situationId], references: [id])
}

model QuestionNGC {
  id            String      @id
  key           String
  value         String?
  utilisateurId String
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id])
  created_at    DateTime    @default(now()) @db.Timestamptz(3)
  updated_at    DateTime    @default(now()) @updatedAt @db.Timestamptz(3)

  @@unique([key, utilisateurId])
}

model SituationNGC {
  id         String     @id
  situation  Json?
  empreinte  Empreinte?
  created_at DateTime   @default(now()) @db.Timestamptz(3)
}

model Quizz {
  id        String          @id
  titre     String
  questions QuizzQuestion[]
}

model Article {
  id      String @id
  titre   String
  contenu String
}

model QuizzQuestion {
  id             String   @id
  ordre          Int      @default(0)
  libelle        String
  propositions   String[]
  solution       String
  texte_riche_ok String   @default("")
  texte_riche_ko String   @default("")
  quizz          Quizz    @relation(fields: [quizzId], references: [id])
  quizzId        String
}

model Badge {
  id            String       @id
  type          String?      @unique
  titre         String
  Utilisateur   Utilisateur? @relation(fields: [utilisateurId], references: [id])
  utilisateurId String
  created_at    DateTime     @default(now()) @db.Timestamptz(3)
  updated_at    DateTime     @default(now()) @updatedAt @db.Timestamptz(3)
}
